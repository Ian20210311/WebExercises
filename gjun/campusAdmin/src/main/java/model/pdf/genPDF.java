package model.pdf;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import model.chart.Jcharts;
import java.awt.Desktop;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException ;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 *
 * @author freddy
 */
public class genPDF 
{
	private static String pdfPath = "jsonfile/FirstPdf.pdf";
    //private static String fontPath = "fonts/kaiu.ttf";
    
    private static BaseFont baseFont = null ;
    private static Font catFont = null ;
    private static Font redFont = null ;
    private static Font subFont = null ;
    private static Font smallBold = null ;
    
    //private static orderRecord allRecords = null;
    private static String[][] RowDatas = null;
    private static String[] ColumnName = null;
            
    

    public genPDF() 
    {
        super() ;
    }
    
    public genPDF(String[][] RowData, String[] ColumnNames) 
    {
        super() ;
        try
        {
            genPDF.RowDatas = RowData ;
            genPDF.ColumnName = ColumnNames ;

            //baseFont = BaseFont.createFont(fontPath, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED );
            baseFont = BaseFont.createFont("MHei-Medium", "UniCNS-UCS2-H", BaseFont.EMBEDDED );
            catFont = new Font(baseFont, 28, Font.NORMAL);
            redFont = new Font(baseFont, 16, Font.NORMAL);
            subFont = new Font(baseFont, 12, Font.NORMAL);
            smallBold = new Font(baseFont, 14, Font.NORMAL);
            
            
            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream(pdfPath));
            document.open();
            addMetaData(document);
            // 產生封面
            addTitlePage(document);
            addContent(document);
            document.close();
            
            //open file
            File pdfFile = new File(pdfPath);
            Desktop desktop = Desktop.getDesktop();
            if(pdfFile.exists()) desktop.open(pdfFile);
            
            
            
        }
        catch(Exception e)
        {
            System.out.println(e);
            Logger.getLogger(genPDF.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
     // iText allows to add metadata to the PDF which can be viewed in your Adobe
    // Reader
    // under File -> Properties
    private static void addMetaData(Document document) {
        document.addTitle("巨匠 OCP Java 課程練習");
        document.addSubject("訂單交易報表");
        document.addKeywords("Java, PDF, iText");
        document.addAuthor("Freddy Ruan");
        document.addCreator("Freddy Ruan");
    }
    
    //封面    
    private static void addTitlePage(Document document)
            throws DocumentException {
        Paragraph preface = new Paragraph();
        // We add one empty line
        addEmptyLine(preface, 1);
        // Lets write a big header
        
        Paragraph titlePara = new Paragraph("訂單銷售統計表", catFont);
        titlePara.setAlignment(Element.ALIGN_CENTER);
        preface.add(titlePara);

        addEmptyLine(preface, 15);
        
        Paragraph warnPara = new Paragraph(
                "<<本資料僅供內部管理系統使用，不得作為銷售文宣，\n並禁止其他非相關人員使用或轉載>> ",
                subFont);
        warnPara.setAlignment(Element.ALIGN_CENTER);
        preface.add(warnPara);

        addEmptyLine(preface, 15);

        // Will create: Report generated by: _name, _date
        Paragraph fromPara = new Paragraph(
                "本報表由巨匠電腦後台管理系統產生 " + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                smallBold);
        fromPara.setAlignment(Element.ALIGN_CENTER);
        preface.add(fromPara);
        
        document.add(preface);
        
        // Start a new page
        document.newPage();
    }
        
    private static void addContent(Document document) throws DocumentException, UnsupportedEncodingException , MalformedURLException 
    , IOException {
        //第一章
        Anchor anchor = new Anchor(" 電商銷售統計表", catFont);
        anchor.setName("電商銷售統計表");
        

        // Second parameter is the number of the chapter
        Chapter catPart = new Chapter(new Paragraph(anchor), 1);

               
        Paragraph subPara = new Paragraph("銷售明細一覽表", subFont);
        Section subCatPart = catPart.addSection(subPara);
        
        addEmptyLine(subPara, 1);
        
 
        // add a table
        createTable(subCatPart) ;
        
        // now add all this to the document
        document.add(catPart);        
        
        
        
         // 第二章
        anchor = new Anchor("銷售圓餅圖", catFont);
        anchor.setName("銷售圓餅圖");
        
        
        
        //產生圓餅圖
        //Jcharts makePie = new Jcharts(genPDF.RowDatas);
        //makePie.PieChart();
        
                
        // Second parameter is the number of the chapter
        catPart = new Chapter(new Paragraph(anchor), 2);

        subPara = new Paragraph("購買數據分布", subFont);
        subCatPart = catPart.addSection(subPara);
        
        addEmptyLine(subPara, 2);

        // now add all this to the document
        document.add(catPart);
        
        //Image pieImage = Image.getInstance(makePie.getPieChatPath()) ;
        //pieImage.setAlignment(Image.ALIGN_CENTER);
        //pieImage.scaleAbsolute(500, 470);
        
        
        
        //document.add(pieImage);

        
    }

    private static void createTable(Section subCatPart)
            throws BadElementException, UnsupportedEncodingException {
        //設定Row numbers
        
        PdfPTable table = new PdfPTable(genPDF.ColumnName.length);
        
        //changing the width percentage
        table.setWidthPercentage(100);
        
        PdfPCell tblTitle = null ;
        for(int i=0 ; i<genPDF.ColumnName.length ; i++)
        {
            //byte[] ptext = ColumnNames[i].getBytes("ISO-8859-1");  
            //String value = new String(ptext, "UTF-8");
            //String value = new String(ptext, baseFont.getEncoding());
            //tblTitle = new PdfPCell(new Phrase(value, subFont));
            tblTitle = new PdfPCell(new Phrase(genPDF.ColumnName[i], subFont));
            tblTitle.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(tblTitle);
        }
        
        table.setHeaderRows(1);
        
        PdfPCell tblRow = null ;
        for(String[] x: genPDF.RowDatas)
        {
            for(String b : x)
            {
                tblRow = new PdfPCell(new Phrase(b, subFont));
                tblRow.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(tblRow);
                //table.addCell(b);
            }
        }
        
        subCatPart.add(table);

    }

    private static void createList(Section subCatPart) {
        List list = new List(true, false, 10);
        list.add(new ListItem("First point"));
        list.add(new ListItem("Second point"));
        list.add(new ListItem("Third point"));
        subCatPart.add(list);
    }
        
        
    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }    
}
